package custom.localize.Wqbh;

import java.security.MessageDigest;

import java.security.NoSuchAlgorithmException;

import java.util.Arrays;

/**
 * User: bob
 * Date: 14/11/29
 * Time: 15:32
 */

public class ApiKeySecret {

	private static String toHex(byte buffer[]) {

		StringBuffer sb = new StringBuffer(buffer.length * 2);

		for (int i = 0; i < buffer.length; i++) {

			sb.append(Character.forDigit((buffer[i] & 240) >> 4, 16));

			sb.append(Character.forDigit(buffer[i] & 15, 16));
		}

		return sb.toString();
	}

	/**
	 * @param appKey: identify the app, which generated by gateway
	 
	 * @param appSecret: identify the app, which generated by gateway
	 
	 * @param method: HTTP method (uppercase)
	 
	 * @return String sign: lowercase
	 
	 * @throws RuntimeException("MD5 not supported")
	 
	 */

	public static String genSign(String appKey, String appSecret, String method) {

		return genSign(appKey, appSecret, method, (int) (System
				.currentTimeMillis() / 1000));
	}

	/**
	 
	 * @param appKey: identify the app, which generated by gateway
	 
	 * @param appSecret: identify the app, which generated by gateway
	 
	 * @param method: HTTP method (uppercase)
	 
	 * @param ts: unix timestamp
	 
	 * @return String sign: lowercase
	 
	 * @throws RuntimeException("MD5 not supported")
	 
	 */

	public static String genSign(String appKey, String appSecret,
			String method, int ts) {

		if ((appKey == null || "".equals(appKey))
				|| (appSecret == null || "".equals(appSecret))
				|| (method == null || "".equals(method))) {

			throw new IllegalArgumentException("param is empty!");

		}

		MessageDigest md5;

		try {

			md5 = MessageDigest.getInstance("MD5");

		} catch (NoSuchAlgorithmException e) {

			throw new RuntimeException("MD5 not supported", e);
		}

		md5.reset();

		String[] params = new String[] { "app_key=" + appKey,
				"app_secret=" + appSecret, "method=" + method, "ts=" + ts };
		Arrays.sort(params);
		StringBuilder sb = new StringBuilder();
		for (int i = 0; i < params.length; i++) {
			sb.append("&").append(params[i]);
		}

		// gen sign
		md5.update(sb.toString().substring(1).getBytes());
		byte[] md5ByteArr = md5.digest();
		String sign = toHex(md5ByteArr).toLowerCase();

		return sign;
	}

//	public static void main(String[] args) throws Exception {
//		System.out.println("ApiKeySecret.genSign/3: sign:"
//				+ ApiKeySecret.genSign("2239rj293fj23jf23j0f23",
//						"3fi903i4f3i49fi340if034f", "POST"));
//		// System.out.println(ApiKeySecret.genSign("2239rj293fj23jf23j0f23", "3fi903i4f3i49fi340if034f", "POST", 1417248592));
//		System.out.println("ApiKeySecret.genSign/4: sign:"
//				+ ApiKeySecret.genSign("2239rj293fj23jf23j0f23",
//						"3fi903i4f3i49fi340if034f", "POST", (int) (System
//								.currentTimeMillis() / 1000)));
//	}

}
